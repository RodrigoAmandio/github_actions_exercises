name: Pull Request Checking

on: 
  pull_request:
    types:
      - opened # Activity Type poderia ser assigned, unassigned, labeled, unlabeled, edited, closed, reopened, etc
      - synchronize # Novos commits adicionados ao mesmo PR
    
    branches:
      - develop # Apenas quando o PR tiver a main como destino
      - main
      # feature/** Branches que se iniciam com feature/...

jobs: 
  check-formatting: # Este espaço pode receber qualquer nome. Será no nome que aparecerá na esteira
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # GitHub Action used in workflows to check out your repository's code so subsequent steps in the workflow can access the files in it. It is like a download of the files.

      - name: Begin
        run: echo "Beginning to check code formatting"

      - name: Set up Python
        uses: actions/setup-python@v4 # Instalar a linguagem que se deseja usar. Neste caso, python
        with:
          python-version: '3.10'  # or any version you need

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort mypy

      - name: Run Black (check only)
        run: |
          echo "Checando a formatação do código com black"
          black --check .
      
      - name: Run Isort (check only)
        run: |
          echo "Checando a ordenação de imports com isort"
          isort --check .

      - name: Run Isort (check only)
        run: |
          echo "Checando a estrutura do código com mypy"
          mypy --check python/main.py
  
  unit-test: # Este espaço pode receber qualquer nome. Será no nome que aparecerá na esteira
    needs: check-formatting # Com esse comando, será possível uma execução em sequência. Sem ele, ambos ops steps seriam executados em paralelo
    runs-on: ubuntu-latest

    steps: 
      - name: Checkout code
        uses: actions/checkout@v3 # GitHub Action used in workflows to check out your repository's code so subsequent steps in the workflow can access the files in it. It is like a download of the files.

      - name: Begin
        run: echo "Beginning unit tests on main.py"

      - name: Set up Python
        uses: actions/setup-python@v4 # Instalar a linguagem que se deseja usar. Neste caso, python
        with:
          python-version: '3.10'  # or any version you need

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: | # O resultado do teste unitário será salvo em um arquivo coverage_report.txt na raiz do repo e disponibilizado com artefato para download, posteriormente
          coverage run -m unittest discover python/tests/
          coverage report > coverage_report.txt

      - name: Upload coverage report # Esta operaçao é chamada de Upload, pois envia o arquivo para o fluxo para uso em outras etapas
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage_report.txt # Será liberado este arquivo para download ao final do workflow

  deploy: # Essa etapa irá simular a obtençao de um artefato de uma etapa para a outra, para uso em um possível CD após fechamento de Pull Request
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
      - name: Get Github Artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: . # Irá fazer o download do artefato para a raiz
        
      - name: Output Coverage Content
        run: cat coverage_report.txt
      
      - name: Deploy
        run: echo "Fazendo deploy do recurso, simulando uma etapa de CD após fechamento com sucesso de Pull Request"



        
          